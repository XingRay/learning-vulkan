//
// Created by leixing on 2024/5/12.
//

#pragma once

#include <cstdint>
#include <limits>
#include <algorithm>

// 强制 GLM 所有接受角度参数的函数都使用弧度，而不是度数, 以避免任何可能的混淆。
#define GLM_FORCE_RADIANS
// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
// We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#define GLM_ENABLE_EXPERIMENTAL

#include <glm/gtx/hash.hpp>


#include <chrono>

// That way GLFW will include its own definitions and automatically load the Vulkan header with it.
#define GLFW_INCLUDE_VULKAN

#include <GLFW/glfw3.h>

#include "VulkanEngine.h"

namespace engine {
    class EngineTest {
    public:
        // public fields
    private:
        std::unique_ptr<VulkanEngine> mEngine;

        // private fields
        const int32_t mWidth = 1024;
        const int32_t mHeight = 1024;
        const std::array<float, 4> mClearColor = {0.05f, 0.05f, 0.05f, 1.0f};

        const int MAX_FRAMES_IN_FLIGHT = 2;

#ifdef NDEBUG
        const bool mEnableValidationLayer = false;
#else
        const bool mEnableValidationLayer = true;
#endif

        GLFWwindow *mWindow;


    public:
        EngineTest();

        ~EngineTest();

        void main();

    private:

        void initWindow();

        void initVulkan();

        void mainLoop();

        void cleanUp();

        std::vector<const char *> getRequiredInstanceExtensions();
    };

    static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(
            VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
            VkDebugUtilsMessageTypeFlagsEXT messageType,
            const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
            void *pUserData);
}
